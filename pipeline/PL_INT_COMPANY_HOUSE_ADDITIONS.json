{
	"name": "PL_INT_COMPANY_HOUSE_ADDITIONS",
	"properties": {
		"activities": [
			{
				"name": "CD_INT_COMPANY_HOUSE_ADDITIONS",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "WITH\nQ_SIC_CODES\nAS\n(Select COMPANY_NUMBER,\n replace(replace(replace(replace(sic_codes,'[',''),']',''),char(39),''),' ','')  LIST_OF_SIC_CODES,\n CHARINDEX(',', replace(replace(replace(replace(sic_codes,'[',''),']',''),char(39),''),' ',''))  FIRST_SEPERATOR,\nCHARINDEX(',', replace(replace(replace(replace(sic_codes,'[',''),']',''),char(39),''),' ',''),CHARINDEX(',', replace(replace(replace(replace(sic_codes,'[',''),']',''),char(39),''),' ',''))+1)   SECOND_SEPERATOR,\n\nCHARINDEX(',', replace(replace(replace(replace(sic_codes,'[',''),']',''),char(39),''),' ',''),CHARINDEX(',', replace(replace(replace(replace(sic_codes,'[',''),']',''),char(39),''),' ',''),CHARINDEX(',',replace(replace(replace(replace(sic_codes,'[',''),']',''),char(39),''),' ',''))+1)+1) THIRD_SEPERATOR\n from [KNE_STG].[COMPANY_HOUSE_ADDITIONS]),\n\nQ_ACCOUNTS\nAS\n(SELECT  \ncompany_name,\ncompany_number,\nsubstring(accounts,(CHARINDEX(concat(char(39),'day',char(39),':'),accounts) +8 ),2) AS ACCOUNTS_REF_DAY,\nsubstring(accounts,(CHARINDEX(concat(char(39),'month',char(39),':'),accounts) +10 ),2) AS ACCOUNTS_REF_MONTH,\nsubstring(accounts,(CHARINDEX(concat(char(39),'due_on',char(39),':'),accounts) +11 ),10) AS ACCOUNTS_NEXTDUEDATE,\nsubstring(accounts,(CHARINDEX(concat(char(39),'overdue',char(39),':'),accounts) +11 ),5) AS ACCOUNTS_OVERDUE\n  FROM [KNE_STG].[COMPANY_HOUSE_ADDITIONS]),\n\nQ_ADDRESS_LIST\nAS\n( SELECT COMPANY_NUMBER,registered_office_Address, \n         replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ','')  Address_List,\n   CASE\n WHEN CHARINDEX('address_line_1',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0\n THEN CHARINDEX('address_line_1',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +14\n END START_OF_ADDRESS_1,\n \n\n CASE\n WHEN CHARINDEX('address_line_1',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0\n THEN (CHARINDEX(',',replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''),CHARINDEX('address_line_1',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +14)) - (CHARINDEX('address_line_1',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +14)\n END LENGTH_OF_ADDRESS_1,\n \n CASE\n WHEN CHARINDEX('address_line_2',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN CHARINDEX('address_line_2',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +14 \n END START_OF_ADDRESS_2, \n \n CASE\n WHEN CHARINDEX('address_line_2',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN (CHARINDEX(',',replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''),CHARINDEX('address_line_2',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +14)) - (CHARINDEX('address_line_2',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +14) \n END LENGTH_OF_ADDRESS_2,\n \n\n CASE\n WHEN CHARINDEX('country',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN CHARINDEX('country',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +7\n END START_OF_COUNTRY, \n\n CASE\n WHEN CHARINDEX('country',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN (CHARINDEX(',',replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''),CHARINDEX('country',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +7)) - (CHARINDEX('country',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +7) \n END LENGTH_OF_COUNTRY,\n \n \n CASE\n WHEN CHARINDEX('locality',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN CHARINDEX('locality',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +8\n END START_OF_LOCALITY, \n \n CASE\n WHEN CHARINDEX('locality',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN (CHARINDEX(',',replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''),CHARINDEX('locality',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +7)) - (CHARINDEX('locality',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +7) \n END LENGTH_OF_LOCALITY,\n \n CASE\n WHEN CHARINDEX('postal_code',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN CHARINDEX('postal_code',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) +11\n END START_OF_POSTCODE, \n\n CASE\n WHEN CHARINDEX('postal_code',(replace(replace(replace(replace(registered_office_Address,'{',''),'}',''),char(39),''),': ',''))) > 0 \n THEN 20\n END LENGTH_OF_POSTCODE\n\n\n FROM [KNE_STG].[COMPANY_HOUSE_ADDITIONS])\n\n\n\n SELECT  \n Q_ADDRESS_LIST.COMPANY_NUMBER,\n Q_ADDRESS_LIST.Address_List,\n SUBSTRING(Q_ADDRESS_LIST.Address_List,START_OF_ADDRESS_1,LENGTH_OF_ADDRESS_1) ADDRESS_LINE_1,\n SUBSTRING(Q_ADDRESS_LIST.Address_List,START_OF_ADDRESS_2,LENGTH_OF_ADDRESS_2) ADDRESS_LINE_2,\n SUBSTRING(Q_ADDRESS_LIST.Address_List,START_OF_COUNTRY,LENGTH_OF_COUNTRY) COUNTRY,\n SUBSTRING(Q_ADDRESS_LIST.Address_List,START_OF_LOCALITY,LENGTH_OF_LOCALITY) TOWN,\n SUBSTRING(Q_ADDRESS_LIST.Address_List,START_OF_POSTCODE,LENGTH_OF_POSTCODE) POSTCODE,\n SUBSTRING(LIST_OF_SIC_CODES,1,5) SIC_CODE_1,\n CASE\n WHEN FIRST_SEPERATOR > 0\n THEN SUBSTRING(LIST_OF_SIC_CODES,(FIRST_SEPERATOR+1),5)\n END SIC_CODE_2,\n CASE\n WHEN SECOND_SEPERATOR > 0\n THEN SUBSTRING(LIST_OF_SIC_CODES,(SECOND_SEPERATOR+1),5)\n END SIC_CODE_3,\n CASE\n WHEN THIRD_SEPERATOR > 0\n THEN SUBSTRING(LIST_OF_SIC_CODES,(THIRD_SEPERATOR+1),5)\n END SIC_CODE_4,\n ACCOUNTS_REF_DAY,\n ACCOUNTS_REF_MONTH,\n ACCOUNTS_NEXTDUEDATE,\n ACCOUNTS_OVERDUE\n\n FROM Q_ADDRESS_LIST\n INNER JOIN Q_SIC_CODES\n ON Q_ADDRESS_LIST.COMPANY_NUMBER=Q_SIC_CODES.COMPANY_NUMBER\n INNER JOIN Q_ACCOUNTS\n ON Q_ADDRESS_LIST.COMPANY_NUMBER=Q_ACCOUNTS.COMPANY_NUMBER",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"tableOption": "autoCreate",
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "COMPANY_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "COMPANY_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "Address_List",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Address_List",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_1",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ADDRESS_LINE_1",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_2",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ADDRESS_LINE_2",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "COUNTRY",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "COUNTRY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "TOWN",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "TOWN",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "POSTCODE",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "POSTCODE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "SIC_CODE_1",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "SICCODE_SIC_TEXT_1",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "SIC_CODE_2",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "SICCODE_SIC_TEXT_2",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "SIC_CODE_3",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "SICCODE_SIC_TEXT_3",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "SIC_CODE_4",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "SICCODE_SIC_TEXT_4",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ACCOUNTS_REF_DAY",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ACCOUNTS_REFDAY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ACCOUNTS_REF_MONTH",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ACCOUNTS_REFMONTH",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ACCOUNTS_NEXTDUEDATE",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ACCOUNTS_NEXTDUEDATE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ACCOUNTS_OVERDUE",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ACCOUNTS_OVERDUE",
									"type": "String",
									"physicalType": "varchar"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_Azure_Destination",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "COMPANY_HOUSE_ADDITIONS",
							"SchemaName": "KNE_STG"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_Azure_Destination",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "COMPANY_HOUSE_ADDITIONS",
							"SchemaName": "KNE_INT"
						}
					}
				]
			}
		],
		"folder": {
			"name": "2_0_INTEGRATION"
		},
		"annotations": []
	}
}